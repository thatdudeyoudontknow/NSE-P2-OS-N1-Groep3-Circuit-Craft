[
    {
        "id": "94060c540c7dac68",
        "type": "tab",
        "label": "RPi with Node-Red",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4f2bee9b83eac1ef",
        "type": "ui_gauge",
        "z": "94060c540c7dac68",
        "name": "temperature",
        "group": "7d47614b3681b36b",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "gauge",
        "label": "Kelvin",
        "format": "{{value}}",
        "min": "253,15",
        "max": "313,15",
        "colors": [
            "#47daff",
            "#0aff3b",
            "#ca3838"
        ],
        "seg1": "273,15",
        "seg2": "294,15",
        "diff": false,
        "className": "",
        "x": 890,
        "y": 280,
        "wires": []
    },
    {
        "id": "7f61c8584f8fc918",
        "type": "ui_gauge",
        "z": "94060c540c7dac68",
        "name": "humidity",
        "group": "7d47614b3681b36b",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "humidity",
        "label": "%",
        "format": "{{value}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#00ff04",
            "#fbff0f",
            "#9c0707"
        ],
        "seg1": "70",
        "seg2": "80",
        "diff": false,
        "className": "",
        "x": 880,
        "y": 360,
        "wires": []
    },
    {
        "id": "e059f9caf00669f8",
        "type": "ui_gauge",
        "z": "94060c540c7dac68",
        "name": "pressure",
        "group": "7d47614b3681b36b",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "pressure",
        "label": "Bar",
        "format": "{{value}}",
        "min": "0.98",
        "max": "1.05",
        "colors": [
            "#ffffff",
            "#ffffff",
            "#ffffff"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 880,
        "y": 440,
        "wires": []
    },
    {
        "id": "7b7cc041ee626c56",
        "type": "serial in",
        "z": "94060c540c7dac68",
        "name": "",
        "serial": "b89d14ef94cb83be",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "15038987d1b63c3a",
                "e275238cb0d17d28"
            ]
        ]
    },
    {
        "id": "158ff913ad96fc74",
        "type": "debug",
        "z": "94060c540c7dac68",
        "name": "UNFORMAT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 280,
        "wires": []
    },
    {
        "id": "562ba4925980ad93",
        "type": "json",
        "z": "94060c540c7dac68",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 490,
        "y": 360,
        "wires": [
            [
                "bbc51ae63e14f13b",
                "a228ca63fde12848",
                "13e96d22cb43c086"
            ]
        ]
    },
    {
        "id": "184669de90fa9155",
        "type": "debug",
        "z": "94060c540c7dac68",
        "name": "temp-out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 240,
        "wires": []
    },
    {
        "id": "bbc51ae63e14f13b",
        "type": "function",
        "z": "94060c540c7dac68",
        "name": "temp",
        "func": "// Extract the temperature directly from the string\nvar match = /\"temp\":([^,]*)/.exec(msg.payload);\n\n// Check if a match is found\nif (match && match[1]) {\n    // Extracted temperature as a string, convert to number\n    var temperature = parseFloat(match[1]);\n\n    // Round the temperature to a precision of 0.5\n    temperature = Math.round(temperature * 2) / 2;\n\n    // Create a new message with only the rounded temperature\n    msg.payload = temperature;\n\n    // Send the modified message\n    return msg;\n} else {\n    // Log an error if temperature extraction fails\n    node.error('Failed to extract temperature from the message.');\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 280,
        "wires": [
            [
                "184669de90fa9155",
                "4f2bee9b83eac1ef"
            ]
        ]
    },
    {
        "id": "adbeeb43147d7609",
        "type": "debug",
        "z": "94060c540c7dac68",
        "name": "hum-out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 320,
        "wires": []
    },
    {
        "id": "1fdff77df1929571",
        "type": "debug",
        "z": "94060c540c7dac68",
        "name": "pres-out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 400,
        "wires": []
    },
    {
        "id": "a228ca63fde12848",
        "type": "function",
        "z": "94060c540c7dac68",
        "name": "hum",
        "func": "// Extract the humidity directly from the string\nvar matchHumidity = /\"hum\":([^,]*)/.exec(msg.payload);\n\n// Check if a match is found\nif (matchHumidity && matchHumidity[1]) {\n    // Extracted humidity as a string, convert to number\n    var humidity = parseFloat(matchHumidity[1]);\n\n    // Round the humidity to a precision of 0.5\n    humidity = Math.round(humidity * 2) / 2;\n\n    // Create a new message with only the rounded humidity\n    msg.payload = humidity;\n\n    // Send the modified message\n    return msg;\n} else {\n    // Log an error if humidity extraction fails\n    node.error('Failed to extract humidity from the message.');\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 360,
        "wires": [
            [
                "adbeeb43147d7609",
                "7f61c8584f8fc918",
                "0962441b6be69c04"
            ]
        ]
    },
    {
        "id": "13e96d22cb43c086",
        "type": "function",
        "z": "94060c540c7dac68",
        "name": "pres",
        "func": "// Extract the pressure directly from the string\nvar matchPressure = /\"pres\":([^,]*)/.exec(msg.payload);\n\n// Check if a match is found\nif (matchPressure && matchPressure[1]) {\n    // Extracted pressure as a string, convert to number\n    var pressure = parseFloat(matchPressure[1]);\n\n    // Round the pressure to a precision of 0.5\n    pressure = Math.round(pressure * 2) / 2;\n\n    // Create a new message with only the rounded pressure\n    msg.payload = pressure;\n\n    // Send the modified message\n    return msg;\n} else {\n    // Log an error if pressure extraction fails\n    node.error('Failed to extract pressure from the message.');\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 440,
        "wires": [
            [
                "1fdff77df1929571",
                "e059f9caf00669f8"
            ]
        ]
    },
    {
        "id": "0962441b6be69c04",
        "type": "ui_chart",
        "z": "94060c540c7dac68",
        "name": "",
        "group": "7d47614b3681b36b",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "100",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1050,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "15038987d1b63c3a",
        "type": "function",
        "z": "94060c540c7dac68",
        "name": "cleaner",
        "func": "// Check if msg.payload contains the required substring\nif (msg.payload.includes('startHere: Received from')) {\n    // Pass through the message if the condition is met\n    return msg;\n} else {\n    // Drop the message if the condition is not met\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 360,
        "wires": [
            [
                "562ba4925980ad93"
            ]
        ]
    },
    {
        "id": "e275238cb0d17d28",
        "type": "function",
        "z": "94060c540c7dac68",
        "name": "function 1",
        "func": "\n// haal die stomme puntjes weg \nif (msg.payload.trim() === '.' || msg.payload.trim() === '') {\n    msg.payload = \"connecting\";\n    return msg;\n} \n// zorg ervoor dat het debug scherm een beetje zichtbaar blijft\n// door de complete <goede> string weg te halen\nif (msg.payload.includes('startHere: Received from')) {\n    // Pass through the message if the condition is met\n    return null;\n}\n\n// geef de rest wel terug\nelse{\n    return msg;\n\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 320,
        "wires": [
            [
                "be5b3ec5baec0bbf"
            ]
        ]
    },
    {
        "id": "be5b3ec5baec0bbf",
        "type": "debug",
        "z": "94060c540c7dac68",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 320,
        "wires": []
    },
    {
        "id": "7d47614b3681b36b",
        "type": "ui_group",
        "name": "Measurements",
        "tab": "cf3653bb5fa876ff",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": "temperature"
    },
    {
        "id": "b89d14ef94cb83be",
        "type": "serial-port",
        "name": "test",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "cf3653bb5fa876ff",
        "type": "ui_tab",
        "name": "Raspberry",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]