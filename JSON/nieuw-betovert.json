[
    {
        "id": "1a34ac8aa7a30978",
        "type": "tab",
        "label": "RPi with Node-Red",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3459f6d29891aa38",
        "type": "ui_gauge",
        "z": "1a34ac8aa7a30978",
        "name": "temperature",
        "group": "a849a6341a1b6c2d",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "gauge",
        "label": "Kelvin",
        "format": "{{value}}",
        "min": "253.15",
        "max": "313.15",
        "colors": [
            "#47daff",
            "#0aff3b",
            "#ca3838"
        ],
        "seg1": "273,15",
        "seg2": "294,15",
        "diff": false,
        "className": "",
        "x": 890,
        "y": 280,
        "wires": []
    },
    {
        "id": "efd57db949e52592",
        "type": "ui_gauge",
        "z": "1a34ac8aa7a30978",
        "name": "humidity",
        "group": "44838a9e3c34bd8a",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "humidity",
        "label": "%",
        "format": "{{value}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#00ff04",
            "#fbff0f",
            "#9c0707"
        ],
        "seg1": "70",
        "seg2": "80",
        "diff": false,
        "className": "",
        "x": 880,
        "y": 360,
        "wires": []
    },
    {
        "id": "56fac3ad87c9d0cb",
        "type": "ui_gauge",
        "z": "1a34ac8aa7a30978",
        "name": "pressure",
        "group": "553c7f2a8d0f76ea",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "pressure",
        "label": "Bar",
        "format": "{{value}}",
        "min": "1000",
        "max": "1100",
        "colors": [
            "#ffffff",
            "#ffffff",
            "#ffffff"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 880,
        "y": 440,
        "wires": []
    },
    {
        "id": "8773d6f19a10258f",
        "type": "debug",
        "z": "1a34ac8aa7a30978",
        "name": "UNFORMAT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 280,
        "wires": []
    },
    {
        "id": "91084a3d5cc3b7c1",
        "type": "json",
        "z": "1a34ac8aa7a30978",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 490,
        "y": 360,
        "wires": [
            [
                "b10792dabe799fb3",
                "4aeaf02d28a2e643",
                "88dcf002e56cc358"
            ]
        ]
    },
    {
        "id": "4928df2160b8e72d",
        "type": "debug",
        "z": "1a34ac8aa7a30978",
        "name": "temp-out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 240,
        "wires": []
    },
    {
        "id": "b10792dabe799fb3",
        "type": "function",
        "z": "1a34ac8aa7a30978",
        "name": "temp",
        "func": "// Extract the temperature directly from the string\nvar match = /\"temp\":([^,]*)/.exec(msg.payload);\n\n// Check if a match is found\nif (match && match[1]) {\n    // Extracted temperature as a string, convert to number\n    var temperature = parseFloat(match[1]);\n\n    // Round the temperature to a precision of 0.5\n    temperature = Math.round(temperature * 2) / 2;\n\n    // Create a new message with only the rounded temperature\n    msg.payload = temperature;\n\n    // Send the modified message\n    return msg;\n} else {\n    // Log an error if temperature extraction fails\n    node.error('Failed to extract temperature from the message.');\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 280,
        "wires": [
            [
                "4928df2160b8e72d",
                "3459f6d29891aa38",
                "ef29332d65d10175"
            ]
        ]
    },
    {
        "id": "3ec0ee508537c0f7",
        "type": "debug",
        "z": "1a34ac8aa7a30978",
        "name": "hum-out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 320,
        "wires": []
    },
    {
        "id": "6945e60ba359e920",
        "type": "debug",
        "z": "1a34ac8aa7a30978",
        "name": "pres-out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 400,
        "wires": []
    },
    {
        "id": "4aeaf02d28a2e643",
        "type": "function",
        "z": "1a34ac8aa7a30978",
        "name": "hum",
        "func": "// Extract the humidity directly from the string\nvar matchHumidity = /\"hum\":([^,]*)/.exec(msg.payload);\n\n// Check if a match is found\nif (matchHumidity && matchHumidity[1]) {\n    // Extracted humidity as a string, convert to number\n    var humidity = parseFloat(matchHumidity[1]);\n\n    // Round the humidity to a precision of 0.5\n    humidity = Math.round(humidity * 2) / 2;\n\n    // Create a new message with only the rounded humidity\n    msg.payload = humidity;\n\n    // Send the modified message\n    return msg;\n} else {\n    // Log an error if humidity extraction fails\n    node.error('Failed to extract humidity from the message.');\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 360,
        "wires": [
            [
                "3ec0ee508537c0f7",
                "efd57db949e52592",
                "e8d3f31be60f45b2"
            ]
        ]
    },
    {
        "id": "88dcf002e56cc358",
        "type": "function",
        "z": "1a34ac8aa7a30978",
        "name": "pres",
        "func": "// Extract the pressure directly from the string\nvar matchPressure = /\"pres\":([^,]*)/.exec(msg.payload);\n\n// Check if a match is found\nif (matchPressure && matchPressure[1]) {\n    // Extracted pressure as a string, convert to number\n    var pressure = parseFloat(matchPressure[1]);\n\n    // Round the pressure to a precision of 0.5\n    pressure = Math.round(pressure * 2) / 2;\n\n    // Create a new message with only the rounded pressure\n    msg.payload = pressure;\n\n    // Send the modified message\n    return msg;\n} else {\n    // Log an error if pressure extraction fails\n    node.error('Failed to extract pressure from the message.');\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 440,
        "wires": [
            [
                "6945e60ba359e920",
                "56fac3ad87c9d0cb"
            ]
        ]
    },
    {
        "id": "e8d3f31be60f45b2",
        "type": "ui_chart",
        "z": "1a34ac8aa7a30978",
        "name": "",
        "group": "44838a9e3c34bd8a",
        "order": 2,
        "width": "6",
        "height": "7",
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "100",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1050,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "4814b3d79d257807",
        "type": "function",
        "z": "1a34ac8aa7a30978",
        "name": "cleaner",
        "func": "// Check if msg.payload contains the required substring\nif (msg.payload.includes('Received from')) {\n    // Pass through the message if the condition is met\n    return msg;\n} else {\n    // Drop the message if the condition is not met\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 360,
        "wires": [
            [
                "91084a3d5cc3b7c1"
            ]
        ]
    },
    {
        "id": "ce188ccaefc284bc",
        "type": "function",
        "z": "1a34ac8aa7a30978",
        "name": "function 1",
        "func": "\n// haal die stomme puntjes weg \nif (msg.payload.trim() === '.' || msg.payload.trim() === '') {\n    msg.payload = \"connecting\";\n    return msg;\n} \n// zorg ervoor dat het debug scherm een beetje zichtbaar blijft\n// door de complete <goede> string weg te halen\nif (msg.payload.includes('startHere: Received from')) {\n    // Pass through the message if the condition is met\n    return null;\n}\n\n// geef de rest wel terug\nelse{\n    return msg;\n\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 320,
        "wires": [
            [
                "dabdc66d60dbbfcb"
            ]
        ]
    },
    {
        "id": "dabdc66d60dbbfcb",
        "type": "debug",
        "z": "1a34ac8aa7a30978",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 320,
        "wires": []
    },
    {
        "id": "d4cbdc7e6d892097",
        "type": "serial in",
        "z": "1a34ac8aa7a30978",
        "name": "",
        "serial": "b89d14ef94cb83be",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "4814b3d79d257807",
                "ce188ccaefc284bc"
            ]
        ]
    },
    {
        "id": "ef29332d65d10175",
        "type": "ui_chart",
        "z": "1a34ac8aa7a30978",
        "name": "",
        "group": "a849a6341a1b6c2d",
        "order": 2,
        "width": "6",
        "height": "7",
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "253.15",
        "ymax": "313.15",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1050,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "a849a6341a1b6c2d",
        "type": "ui_group",
        "name": "temperature",
        "tab": "cf3653bb5fa876ff",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "44838a9e3c34bd8a",
        "type": "ui_group",
        "name": "Humidity",
        "tab": "cf3653bb5fa876ff",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "553c7f2a8d0f76ea",
        "type": "ui_group",
        "name": "Pressure",
        "tab": "cf3653bb5fa876ff",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ".{     flex-wrap: nowrap !important; /* Voorkom dat de kaarten worden gewrapt naar de volgende regel */     overflow-x: auto; /* Horizontaal scrollen inschakelen als de kaarten niet op de pagina passen */ }"
    },
    {
        "id": "b89d14ef94cb83be",
        "type": "serial-port",
        "name": "test",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "cf3653bb5fa876ff",
        "type": "ui_tab",
        "name": "Raspberry",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]